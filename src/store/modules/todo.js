export default {
  actions: {
    async fetchTodos(ctx) {
      fetch("https://jsonplaceholder.typicode.com/todos?_limit=3")
        .then((body) => {
          return body.json();
        })
        .then((todos) => {
          ctx.commit("updateTodos", todos);
        });
    },
  },
  // похожи на мутации, но вместо того, чтобы мутировать состояние,
  // они совершают (commit) мутации.
  // Главное отличие действий от мутаций это то что действия асинхронны, то есть предназначены для выполнения асинхронных задач;
  // когда эти задачи выполнены, нам нужно фиксировать (commit) мутацию, которая, в свою очередь, обновляет состояние.

  mutations: {
    updateTodos(state, todos) {
      state.todos = todos;
    },
  },
  // Мутации — единственный способ, которым мы можем обновить наше состояние Vuex.
  // Они выполняют одну и только одну задачу: установить состояние.
  // Это функция, которая принимает два аргумента, состояние (state) и полезную нагрузку (payload), где полезная нагрузка не обязательна.

  state: {
    todos: [],
  },
  // Это один объект, который содержит все данные.
  // Это похоже на ключевое слово data в структуре отдельных компонентов, за исключением того,
  // что к этому состоянию можно получить доступ более чем из одного компонента, и, когда это состояние обновляется,
  // все компоненты, обращающиеся к нему, также получают это изменение.

  getters: {
    todos: (state) => {
      return state.todos;
    },
  },
  // являются в значительной степени вычисляемыми свойствами для хранилища Vuex.
  // Они позволяют нам генерировать новое состояние на основе текущего состояния — например, вычисляя, сколько товаров у нас в корзине.
};
